using Sabio.Web.Domain;
using Sabio.Web.Models.Requests;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using Sabio.Data;
using Sabio.Web.Services.Interfaces;
namespace Sabio.Web.Services
{
    public class RequestTokenService : BaseService, IRequestTokenService 
    {
        public Guid Insert(ResetPasswordEmailRequest model)
        {
            Guid token = Guid.Empty;

            DataProvider.ExecuteNonQuery(GetConnection, "dbo.RequestToken_Insert"
                , inputParamMapper: delegate(SqlParameterCollection paramCollection)
                {
                    SqlParameter p = new SqlParameter("@Token", System.Data.SqlDbType.UniqueIdentifier);
                    p.Direction = System.Data.ParameterDirection.Output;

                    paramCollection.Add(p);
                    paramCollection.AddWithValue("@Email", model.Email);
                }, returnParameters: delegate(SqlParameterCollection param)
                {
                    Guid.TryParse(param["@Token"].Value.ToString(), out token);
                });
            return token;
        }

        public RequestToken SelectRequestTokenModel(Guid token)
        {
            RequestToken select = null;

            DataProvider.ExecuteCmd(GetConnection, "dbo.RequestToken_Select"
                , inputParamMapper: delegate(SqlParameterCollection paramCollection)
                {
                    paramCollection.AddWithValue("@Token", token);
                }
                , map: delegate(IDataReader reader, short set)
                {
                    select = new RequestToken();
                    int startingIndex = 0;
                    select.Id = reader.GetSafeInt32(startingIndex++);
                    select.Type = reader.GetSafeInt32(startingIndex++);
                    select.Token = reader.GetGuid(startingIndex++);
                    select.Created = reader.GetDateTime(startingIndex++);
                    select.Email = reader.GetSafeString(startingIndex++);
                    select.Used = reader.GetBoolean(startingIndex++);
                    select.DateUsed = reader.GetSafeDateTime(startingIndex++);
                });
            return select;
        }

        public void MarkTokenUsed(Guid token)
        {
            DataProvider.ExecuteNonQuery(GetConnection, "dbo.RequestToken_Update"
            , inputParamMapper: delegate(SqlParameterCollection paramCollection)
            {
                paramCollection.AddWithValue("@Token", token);
            }, returnParameters: delegate(SqlParameterCollection param)
            {

            });
        }
    }
}
