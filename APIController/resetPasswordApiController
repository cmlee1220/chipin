using Sabio.Web.Domain;
using Sabio.Web.Models;
using Sabio.Web.Models.Requests;
using Sabio.Web.Models.Responses;
using Sabio.Web.Services;
using Sabio.Web.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace Sabio.Web.Controllers.Api
{
    [RoutePrefix("api/password")]
    public class ResetPasswordApiController : ApiController
    {
        private IMessagingService _messagingService;

        public ResetPasswordApiController(IMessagingService MessagingService)
        {
            _messagingService = MessagingService;
        }
    //  create a private property to attach the service when it is injected - just like angular
        private IRequestTokenService _requestTokenService;

    //  we tell Unity to give us an instance of IRequestTokenService by putting it here in the constructor signature
    //  Unity knows which service to give us (in this case RequestTokenService) because we tell it in App_Start/UnityConfig.cs
        public ResetPasswordApiController(IRequestTokenService requestTokenService)
        {
            _requestTokenService = requestTokenService;
        }

        // GET: ResetPassword
        [Route(""), HttpPost]
        public HttpResponseMessage Email(ResetPasswordEmailRequest model)
        {
            if (ModelState.IsValid && model !=null)
            {
                bool result = UserService.IsUser(model.Email);
                if (result == true)
                {
                //  we have to replace each reference to RequestTokenService with _requestTokenService, which is the injected version.
                //  we can no longer call these functions the old way because we removed the "static" keyword in the service.
                    Guid newUid = _requestTokenService.Insert(model);
                    _messagingService.ResetPasswordEmail(model, newUid);
                    
                    ItemResponse<Guid> responseModel = new ItemResponse<Guid>();
                    responseModel.Item = newUid;
                    return Request.CreateResponse(HttpStatusCode.OK, responseModel);
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, "This email was not found in our system.");
                }
            }
            else
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, ModelState);
            }           
        }

               
        [Route("update/{newId:guid}"), HttpPut]
        public HttpResponseMessage UpdatePassword(Guid newId, ResetPasswordModel model)
        {
                       
            if (ModelState.IsValid && model != null)
            {
                RequestToken select = _requestTokenService.SelectRequestTokenModel(newId);//gets the model acc to id
                string emailAddress = select.Email;//gets the email from model
                ApplicationUser userModel = UserService.GetUser(emailAddress);//creates a model with user info by passing in email
                string userId = userModel.Id ; //assigns userId with the userId from the model above
                _requestTokenService.MarkTokenUsed(newId);
                string password = model.Confirm; //assigns the new password created to password
                bool validPassword = UserService.ChangePassWord(userId, password); //user Id and new password is passed into the method to update password
                //server will return true or false on whether it's been updated

                if (validPassword == false)
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, "Password was not updated. Please try again.");
                }
                else
                {        
                    ItemResponse<bool> responseModel = new ItemResponse<bool>();
                    responseModel.Item = validPassword;
                    return Request.CreateResponse(HttpStatusCode.OK, responseModel);
                }
            }
            else
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest, "Server is busy. Please try again in a few minutes.");
            }
        }

    }
}
